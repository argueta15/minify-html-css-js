const gulp = require('gulp');
const concat = require('gulp-concat');
const browsersync = require('browser-sync').create();
const cleanCss = require('gulp-clean-css');
const uglify = require('gulp-uglify');
const del = require('del');
const htmlMinify = require('html-minifier');
const imagemin = require('gulp-imagemin');
const flatten = require('gulp-flatten');
const purgecss = require('gulp-purgecss');


// Concat and minify CSS files
gulp.task('build-css', () => {
    return gulp.src('src/css/*.css')
    .pipe(concat('app.css'))
    .pipe(cleanCss())
    .pipe(gulp.dest('build/css'));
});

// Copy fonts files
gulp.task('build-fonts', () => {
    return gulp.src('src/vendor/**/*.{ttf,otf,woff,woff2}')
        .pipe(flatten())
        .pipe(gulp.dest('./build/fonts'))
});

// Concat and minify libraries JS files
gulp.task('build-vendor-js', () => {
    return gulp.src([
            'src/js/jquery.min.js',
            'src/vendor/bootstrap/js/bootstrap.bundle.min.js',
            'src/vendor/bootstrap-select/js/bootstrap-select.min.js',
            'src/vendor/swiper/swiper.min.js'
        ], { allowEmpty: true })
        .pipe(concat('vendor.min.js'))
        .pipe(gulp.dest('build/libs'));
});

// Concat and minify application specific JS files
gulp.task('build-js', () => {
    return gulp.src(['src/js/functions.js'])
        .pipe(concat('app.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('build/js'));
});

// Minify application HTML
const options = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
};

gulp.task('build-images', () => {
    return gulp.src('src/images/**/*')
        .pipe(imagemin([
            imagemin.gifsicle({interlaced: true}),
            imagemin.mozjpeg({quality: 75, progressive: true}),
            imagemin.optipng({optimizationLevel: 5}),
            imagemin.svgo({
                plugins: [
                    {
                        name: 'removeViewBox',
                        active: true
                    },
                    {
                        name: 'cleanupIDs',
                        active: false
                    }
                ]
            })
        ]))
        .pipe(gulp.dest('build/images'))
});
  
gulp.task('build-html', () => {
    return gulp.src(['src/*.html'])
        .on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            return file.contents = buferFile
        })
        .pipe(gulp.dest('build'))
});

// Purge CSS files
gulp.task('purge-css', () => {
    return gulp.src('build/css/*.css')
    .pipe( 
        purgecss({
          content: ['build/**/*.html']
        })
    )
    .pipe(gulp.dest('build/css'));
});

gulp.task('clean', async () => {
   return del.sync('build');
});

// Start session
gulp.task("session-start", (cb) => {
    return gulp.series(
        'clean',
        'build-css',
        'build-fonts',
        'build-vendor-js',
        'build-js',
        'build-images',
        'build-html',
        'purge-css'
    )(cb);
});

// static server and watching CSS/JS/HTML files for changes
gulp.task("server", (done) => {
  browsersync.init({
      server: './build',
      directory: true
  });

  // Watch for file changes
  gulp.watch('./src/css/*.css', gulp.series('session-start'), browsersync.reload);
  gulp.watch('./src/js/*.js', gulp.series('session-start'), browsersync.reload);
  gulp.watch('./src/vendor/*.js', gulp.series('session-start'), browsersync.reload)

});

gulp.task('default', gulp.series('session-start', 'server'));
